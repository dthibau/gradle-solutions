plugins {
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "6.1.0.5360"
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'maven-publish'
}

group = 'org.formation'
version = '0.0.1'
sourceCompatibility = '11'

project.configurations.each { configuration ->
    println "Configuration: ${configuration.name}"
}

sourceSets {
	intTest {
		java.srcDir file('src/intTest/java')
		resources.srcDir file('src/intTest/resources')
		compileClasspath += sourceSets.main.output
		runtimeClasspath += output + compileClasspath 
	}
}

configurations {
	intTestImplementation.extendsFrom testImplementation
	intTestRuntimeOnly.extendsFrom runtimeOnly
}


repositories {
	mavenCentral()
}

dependencies {
	runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-validation")
	implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation("io.jsonwebtoken:jjwt:0.9.1")
	implementation('io.springfox:springfox-swagger2:2.9.2')
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")
	runtimeOnly("org.springframework.boot:spring-boot-starter-actuator")
	runtimeOnly('io.springfox:springfox-swagger-ui:2.9.2')
	runtimeOnly("org.webjars:bootstrap:4.1.3")
	runtimeOnly("org.hsqldb:hsqldb")
	runtimeOnly("org.postgresql:postgresql")
	runtimeOnly("org.springframework.boot:spring-boot-devtools")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.security:spring-security-test")
	testImplementation("net.sourceforge.htmlunit:htmlunit")
}

task intTest(group: 'Build', description:'Run integration tests', type: Test) {
	testClassesDirs = sourceSets.intTest.output.classesDirs
	classpath = sourceSets.intTest.runtimeClasspath

	useJUnitPlatform()
	reports {
		junitXml.destination = file("$buildDir/test-results/integration")
		html.destination = file("$buildDir/reports/tests/integration")
	}
	testLogging {
		//		showStandardStreams = true
		events 'started', 'passed', 'skipped', 'failed'
	}
}
check.dependsOn intTest

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		//		showStandardStreams = true
		events 'started', 'passed', 'skipped', 'failed'
	}
	finalizedBy jacocoTestReport 
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

		reports {
			xml.required.set(true)
			//xml.outputLocation.set(layout.buildDirectory.file("jacoco-custom/coverage.xml"))
		}

}

task jacocoIntTestReport(group: 'Verification', description: 'Generates code coverage report for the intTest task.', type: JacocoReport) {
  sourceSets sourceSets.intTest
  executionData intTest
}
intTest.finalizedBy jacocoIntTestReport


publishing {
  publications {
    maven(MavenPublication) {
    	artifact("build/libs/${project.name}-${version}.jar") {
      		extension 'jar'
    	}
	}
  }

  repositories {
	if ( version.toString().indexOf('SNAPSHOT') != -1 ) {
		maven {
			name 'nexus'
			url 'http://localhost:8081/repository/maven-snapshots/'
			allowInsecureProtocol true
			credentials {
				username project.repoUser
				password project.repoPassword
			}
		}
	} else {
		maven {
			name 'nexus'
			url 'http://localhost:8081/repository/maven-releases/'
			allowInsecureProtocol true
			credentials {
				username project.repoUser
				password project.repoPassword
			}
		}
	}

  }
}
publishMavenPublicationToMavenLocal.dependsOn build
publishMavenPublicationToNexusRepository.dependsOn build

>>>>>>> 110f381 (Publishing to Nexus)
