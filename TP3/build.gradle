setDescription('Atelier TP3')
println "Description of project $name: " + description 

ext.versionFile = file('version.properties')
ext.srcDirectory = './src'
ext.outputDirectory = './bin'
ext.distDirectory = './dist'

// Configuration task
version = readVersion()


task clean(type: Delete, group: 'Build', description: "Supprimme les répertoires $project.outputDirectory et $project.distDirectory") {
   delete outputDirectory
   delete distDirectory
   doLast {
     logger.quiet "Project cleaned"
   }
}

task copyVersion(type: Copy, group: 'Build', description: "Copie le fichier de version dans $project.outputDirectory") {
    from project.versionFile
    into outputDirectory
}

task compile(type: Copy, dependsOn: copyVersion, group: 'Build', description: "Compile les sources vers $project.outputDirectory") {
    from (srcDirectory) {
		include '**/*.c'
		rename { String filename ->
        	filename.replace(".c", ".o")
    	}
	}
    into outputDirectory
}

task createDistribution(type: Zip, dependsOn: [compile],  group: 'Build', description: "Crée la distribution au format zip") {
  from outputDirectory
  destinationDirectory = file(distDirectory)
  archiveFileName="${project.name}-${project.version}.zip"
}

task makeRelease(group: 'Build', description: "Construit et déploie une release") {
  inputs.property('classifier', project.version.classifier)
  outputs.file versionFile

  doFirst {
  	print "Input properties : ${inputs.properties} "
  }
  
  doLast {
    ant.propertyfile(file: versionFile) {
		entry(key: 'classifier', type: 'string', operation: '=', value: 'final')
	}
  }
}

task printProject {
    group = 'Print'
    description = 'Print project information'
    
    doLast {
        println "Nom tâche $name Description : $description"
        println "Nom projet ${project.name} - Profil = ${project.profile} - Version : ${project.version}"
    }
}


ProjectVersion readVersion() {
  logger.info 'Reading the version file.'
  if(!versionFile.exists()) {
    throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
  }

  Properties versionProps = new Properties()
  versionFile.withInputStream { stream -> versionProps.load(stream) }


  new ProjectVersion(versionProps.major, versionProps.minor, versionProps.classifier)

}

class ProjectVersion {
    Integer majorNumber
    Integer minorNumber
    String classifier = 'beta'

    ProjectVersion(majorNumber, minorNumber, classifier) {

		this.minorNumber = Integer.parseInt(minorNumber)
		this.majorNumber = Integer.parseInt(majorNumber)
        if ( classifier )
		    this.classifier = classifier

	}

    @Override
    String toString() {
         "$majorNumber.$minorNumber.$classifier" 
    }
}

