import org.formation.*

setDescription("Atelier TP3")

ext.versionFile = file('version.properties')
ext.srcDirectory = './src'
ext.outputDirectory = './bin'
ext.distDirectory = './dist'
ext.deployLocation = '/home/dthibau/Formations/Gradle/mywork/repo'

// Configuration task
version = readVersion()


task clean(type: Delete, group: 'Build', description: "Supprimme les répertoires $project.outputDirectory et $project.distDirectory") {
   delete outputDirectory
   delete distDirectory
   doLast {
     logger.quiet "Project cleaned"
   }
}

task copyVersion(type: Copy, group: 'Build', description: "Copie le fichier de version dans $project.outputDirectory") {
    from project.versionFile
    into outputDirectory
}

task compile(type: Copy, dependsOn: copyVersion, group: 'Build', description: "Compile les sources vers $project.outputDirectory") {
    from (srcDirectory) {
		include '**/*.c'
		rename { String filename ->
        	filename.replace(".c", ".o")
    	}
	}
    into outputDirectory
}

task createDistribution(type: Zip, dependsOn: [compile],  group: 'Build', description: "Crée la distribution au format zip") {
  from outputDirectory
  destinationDirectory = file(distDirectory)
  archiveFileName="${project.name}-${project.version}.zip"
}

task makeRelease(type:UpdateVersionTask, dependsOn: [clean]) {
  projectVersion new ProjectVersion("$project.version.majorNumber","$project.version.minorNumber",'Final')
  destFile versionFile
}

task deploy(type:Copy, group: 'Build', description: "Déploie la distribution") {
   from createDistribution.outputs.files
   into deployLocation
}

task makeSnapshot(type:UpdateVersionTask, dependsOn: [deploy]) {
  projectVersion new ProjectVersion(''+project.version.majorNumber, "${project.version.minorNumber+1}", 'SNAPSHOT')
  destFile versionFile
}



task release(dependsOn: [makeRelease, makeSnapshot],  group: 'Build', description: "Effectue une release") {
}

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(makeRelease) && !project.profile.equals('prod') ) {
         throw new GradleException("makeRelease requires profile prod")
    }
}

task printProject {
    group = 'Print'
    description = 'Print project information'
    
    doLast {
        println "Nom tâche $name Description : $description"
        println "Nom projet ${project.name} - Profil = ${project.profile} - Version : ${project.version}"
    }
}


ProjectVersion readVersion() {
  logger.info 'Reading the version file.'
  if(!versionFile.exists()) {
    throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
  }

  Properties versionProps = new Properties()
  versionFile.withInputStream { stream -> versionProps.load(stream) }


  new ProjectVersion(versionProps.major, versionProps.minor, versionProps.classifier)

}



